{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\Malak\\\\Documents\\\\code\\\\python\\\\Fyp\\\\frontend\\\\my-app\\\\src\\\\App.js\",\n  _s = $RefreshSig$();\nimport React, { useState } from 'react';\nimport './App.css';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nfunction App() {\n  _s();\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [previewImage, setPreviewImage] = useState(null);\n  const handleFileChange = event => {\n    const file = event.target.files[0];\n    if (file) {\n      setSelectedFile(file);\n\n      // Preview the selected image\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreviewImage(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n  const handleUpload = () => {\n    // Implement your upload logic here\n    // For a basic example, you can log the selected file to the console\n    console.log('Selected File:', selectedFile);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"App\",\n    children: /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"upload-container\",\n      children: [/*#__PURE__*/_jsxDEV(\"input\", {\n        type: \"file\",\n        onChange: handleFileChange\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 34,\n        columnNumber: 9\n      }, this), previewImage && /*#__PURE__*/_jsxDEV(\"img\", {\n        src: previewImage,\n        alt: \"Preview\",\n        className: \"preview-image\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 36,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: handleUpload,\n        children: \"Upload\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n}\n_s(App, \"i/oxf9u7ZNY7ajBgFt9+a0M1EBE=\");\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["React","useState","jsxDEV","_jsxDEV","App","_s","selectedFile","setSelectedFile","previewImage","setPreviewImage","handleFileChange","event","file","target","files","reader","FileReader","onloadend","result","readAsDataURL","handleUpload","console","log","className","children","type","onChange","fileName","_jsxFileName","lineNumber","columnNumber","src","alt","onClick","_c","$RefreshReg$"],"sources":["C:/Users/Malak/Documents/code/python/Fyp/frontend/my-app/src/App.js"],"sourcesContent":["import React, { useState } from 'react';\nimport './App.css';\n\nfunction App() {\n  const [selectedFile, setSelectedFile] = useState(null);\n  const [previewImage, setPreviewImage] = useState(null);\n\n  const handleFileChange = (event) => {\n    const file = event.target.files[0];\n\n    if (file) {\n      setSelectedFile(file);\n\n      // Preview the selected image\n      const reader = new FileReader();\n      reader.onloadend = () => {\n        setPreviewImage(reader.result);\n      };\n      reader.readAsDataURL(file);\n    }\n  };\n\n  const handleUpload = () => {\n    // Implement your upload logic here\n    // For a basic example, you can log the selected file to the console\n    console.log('Selected File:', selectedFile);\n  };\n\n  \n\n  return (\n    <div className=\"App\">\n      <div className=\"upload-container\">\n        <input type=\"file\" onChange={handleFileChange} />\n        {previewImage && (\n          <img\n            src={previewImage}\n            alt=\"Preview\"\n            className=\"preview-image\"\n          />\n        )}\n        <button onClick={handleUpload}>Upload</button>\n      </div>\n    </div>\n  );\n}\n\nexport default App;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,QAAQ,OAAO;AACvC,OAAO,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnB,SAASC,GAAGA,CAAA,EAAG;EAAAC,EAAA;EACb,MAAM,CAACC,YAAY,EAAEC,eAAe,CAAC,GAAGN,QAAQ,CAAC,IAAI,CAAC;EACtD,MAAM,CAACO,YAAY,EAAEC,eAAe,CAAC,GAAGR,QAAQ,CAAC,IAAI,CAAC;EAEtD,MAAMS,gBAAgB,GAAIC,KAAK,IAAK;IAClC,MAAMC,IAAI,GAAGD,KAAK,CAACE,MAAM,CAACC,KAAK,CAAC,CAAC,CAAC;IAElC,IAAIF,IAAI,EAAE;MACRL,eAAe,CAACK,IAAI,CAAC;;MAErB;MACA,MAAMG,MAAM,GAAG,IAAIC,UAAU,CAAC,CAAC;MAC/BD,MAAM,CAACE,SAAS,GAAG,MAAM;QACvBR,eAAe,CAACM,MAAM,CAACG,MAAM,CAAC;MAChC,CAAC;MACDH,MAAM,CAACI,aAAa,CAACP,IAAI,CAAC;IAC5B;EACF,CAAC;EAED,MAAMQ,YAAY,GAAGA,CAAA,KAAM;IACzB;IACA;IACAC,OAAO,CAACC,GAAG,CAAC,gBAAgB,EAAEhB,YAAY,CAAC;EAC7C,CAAC;EAID,oBACEH,OAAA;IAAKoB,SAAS,EAAC,KAAK;IAAAC,QAAA,eAClBrB,OAAA;MAAKoB,SAAS,EAAC,kBAAkB;MAAAC,QAAA,gBAC/BrB,OAAA;QAAOsB,IAAI,EAAC,MAAM;QAACC,QAAQ,EAAEhB;MAAiB;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC,EAChDtB,YAAY,iBACXL,OAAA;QACE4B,GAAG,EAAEvB,YAAa;QAClBwB,GAAG,EAAC,SAAS;QACbT,SAAS,EAAC;MAAe;QAAAI,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAC1B,CACF,eACD3B,OAAA;QAAQ8B,OAAO,EAAEb,YAAa;QAAAI,QAAA,EAAC;MAAM;QAAAG,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC3C;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACH,CAAC;AAEV;AAACzB,EAAA,CA1CQD,GAAG;AAAA8B,EAAA,GAAH9B,GAAG;AA4CZ,eAAeA,GAAG;AAAC,IAAA8B,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}